{"includedArchiveIdentifiers":["SharedTesting"],"interfaceLanguages":{"swift":[{"children":[{"title":"JSON Utilities","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/testing\/test\/makejson(withobjects:)","title":"static func makeJSON(withObjects: [[String : Any]]) -> Data","type":"method"},{"path":"\/documentation\/sharedtesting\/testing\/test\/makejson(withobject:)","title":"static func makeJSON(withObject: [String : Any]) -> Data","type":"method"},{"path":"\/documentation\/sharedtesting\/testing\/test\/makejson(witharray:)","title":"static func makeJSON(withArray: [String]) -> Data","type":"method"},{"path":"\/documentation\/sharedtesting\/testing\/test\/assertequal(_:_:sourcelocation:)","title":"static func assertEqual(Data, Data, sourceLocation: SourceLocation) throws","type":"method"},{"title":"Memory Leak Tracking","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/teardowntrackingtrait\/providescope(for:testcase:performing:)","title":"func provideScope(for: Test, testCase: Test.Case?, performing: () async throws -> Void) async throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/teardowntrackingtrait\/isrecursive","title":"var isRecursive: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/teardowntrackingtrait\/scopeprovider(for:testcase:)","title":"func scopeProvider(for: Test, testCase: Test.Case?) -> Self?","type":"method"}],"path":"\/documentation\/sharedtesting\/teardowntrackingtrait\/suitetrait-implementations","title":"SuiteTrait Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/teardowntrackingtrait\/teardowntracking()","title":"static func teardownTracking() -> Self","type":"method"}],"path":"\/documentation\/sharedtesting\/teardowntrackingtrait\/trait-implementations","title":"Trait Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/teardowntrackingtrait\/teardowntracking()","title":"static func teardownTracking() -> Self","type":"method"}],"path":"\/documentation\/sharedtesting\/teardowntrackingtrait\/trait-implementations","title":"Trait Implementations","type":"symbol"}],"path":"\/documentation\/sharedtesting\/teardowntrackingtrait","title":"TeardownTrackingTrait","type":"struct"},{"title":"Asynchronous Process Handling","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/asyncspy\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/asyncspy\/performcallcount","title":"var performCallCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/asyncspy\/async(yieldcount:at:process:expectationbeforecompletion:completewith:expectationaftercompletion:sourcelocation:)-79903","title":"func async(yieldCount: Int, at: Int, process: () -> Void, expectationBeforeCompletion: (() -> Void)?, completeWith: (() -> Result<Result, any Error>)?, expectationAfterCompletion: (() -> Void)?, sourceLocation: SourceLocation) async","type":"method"},{"path":"\/documentation\/sharedtesting\/asyncspy\/async(yieldcount:at:process:expectationbeforecompletion:completewith:expectationaftercompletion:sourcelocation:)-7uuf9","title":"func async<T>(yieldCount: Int, at: Int, process: () async throws -> T, expectationBeforeCompletion: (() -> Void)?, completeWith: (() -> Result<Result, any Error>)?, expectationAfterCompletion: ((T) -> Void)?, sourceLocation: SourceLocation) async throws","type":"method"},{"path":"\/documentation\/sharedtesting\/asyncspy\/async(yieldcount:process:expectationbeforecompletion:completewith:expectationaftercompletion:sourcelocation:)","title":"func async<T>(yieldCount: Int, process: () async throws -> T, expectationBeforeCompletion: (() -> Void)?, completeWith: (() -> Result<Result, any Error>)?, expectationAfterCompletion: ((T) -> Void)?, sourceLocation: SourceLocation) async throws","type":"method"},{"path":"\/documentation\/sharedtesting\/asyncspy\/complete(with:at:sourcelocation:)-6gqqc","title":"func complete(with: any Error, at: Int, sourceLocation: SourceLocation)","type":"method"},{"path":"\/documentation\/sharedtesting\/asyncspy\/complete(with:at:sourcelocation:)-sxx2","title":"func complete(with: Result, at: Int, sourceLocation: SourceLocation)","type":"method"},{"path":"\/documentation\/sharedtesting\/asyncspy\/params(at:)","title":"func params(at: Int) -> [any Sendable]","type":"method"},{"path":"\/documentation\/sharedtesting\/asyncspy\/perform(_:)","title":"func perform<each Parameter>(repeat each Parameter) async throws -> Result","type":"method"}],"path":"\/documentation\/sharedtesting\/asyncspy","title":"AsyncSpy","type":"class"},{"path":"\/documentation\/sharedtesting\/testing\/test\/async(yieldcount:process:onbeforecompletion:onaftercompletion:)","title":"static func async<T>(yieldCount: Int, process: () async throws -> T, onBeforeCompletion: (() -> Void)?, onAfterCompletion: ((T) -> Void)?) async throws","type":"method"},{"path":"\/documentation\/sharedtesting\/testing\/test\/expect(_:sourcelocation:)","title":"static func expect<T, E>(() async throws -> T, sourceLocation: SourceLocation) -> ExpectationTracker<T, E>","type":"method"},{"path":"\/documentation\/sharedtesting\/testing\/test\/trackchange(of:in:sourcelocation:)","title":"static func trackChange<SUT, T>(of: KeyPath<SUT, T>, in: SUT, sourceLocation: SourceLocation) -> ChangeTracker<SUT, T>","type":"method"},{"title":"Localized keys and values exist.","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/localized(_:in:sourcelocation:)","title":"func localized(String, in: Bundle, sourceLocation: SourceLocation) -> String","type":"func"},{"path":"\/documentation\/sharedtesting\/localized(_:in:table:sourcelocation:)","title":"func localized(String, in: Bundle, table: String, sourceLocation: SourceLocation) -> String","type":"func"},{"path":"\/documentation\/sharedtesting\/assertlocalizedkeyandvaluesexist(in:_:sourcelocation:)","title":"func assertLocalizedKeyAndValuesExist(in: Bundle, String, sourceLocation: SourceLocation)","type":"func"},{"title":"Additional Utilities","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/foundation\/uuid\/incrementing()","title":"static func incrementing() async throws -> UUID","type":"method"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/modelpresentation\/init(model:presentation:)","title":"init(model: Model, presentation: Presentation)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/modelpresentation\/model","title":"var model: Model","type":"property"},{"path":"\/documentation\/sharedtesting\/modelpresentation\/presentation","title":"var presentation: Presentation","type":"property"}],"path":"\/documentation\/sharedtesting\/modelpresentation","title":"ModelPresentation","type":"struct"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/changetracker\/execute()","title":"func execute() async","type":"method"},{"path":"\/documentation\/sharedtesting\/changetracker\/expectfinalvalue(_:)","title":"func expectFinalValue(() -> T) -> ChangeTracker<SUT, T>","type":"method"},{"path":"\/documentation\/sharedtesting\/changetracker\/expectinitialvalue(_:)","title":"func expectInitialValue(() -> T) -> ChangeTracker<SUT, T>","type":"method"},{"path":"\/documentation\/sharedtesting\/changetracker\/giveninitialstate(_:)","title":"func givenInitialState(() -> Void) -> ChangeTracker<SUT, T>","type":"method"},{"path":"\/documentation\/sharedtesting\/changetracker\/whenchanging(_:)","title":"func whenChanging(() -> Void) -> ChangeTracker<SUT, T>","type":"method"}],"path":"\/documentation\/sharedtesting\/changetracker","title":"ChangeTracker","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/expectationtracker\/execute()","title":"func execute() async","type":"method"},{"path":"\/documentation\/sharedtesting\/expectationtracker\/tocompletewith(_:)","title":"func toCompleteWith(() -> Result<T, E>) -> ExpectationTracker<T, E>","type":"method"},{"path":"\/documentation\/sharedtesting\/expectationtracker\/when(_:)","title":"func when(() -> Void) -> ExpectationTracker<T, E>","type":"method"}],"path":"\/documentation\/sharedtesting\/expectationtracker","title":"ExpectationTracker","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/sequentialuuidgenerationtrait\/providescope(for:testcase:performing:)","title":"func provideScope(for: Test, testCase: Test.Case?, performing: () async throws -> Void) async throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/sequentialuuidgenerationtrait\/isrecursive","title":"var isRecursive: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/sequentialuuidgenerationtrait\/scopeprovider(for:testcase:)","title":"func scopeProvider(for: Test, testCase: Test.Case?) -> Self?","type":"method"}],"path":"\/documentation\/sharedtesting\/sequentialuuidgenerationtrait\/suitetrait-implementations","title":"SuiteTrait Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/sequentialuuidgenerationtrait\/comments","title":"var comments: [Comment]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/sequentialuuidgenerationtrait\/prepare(for:)","title":"func prepare(for: Test) async throws","type":"method"}],"path":"\/documentation\/sharedtesting\/sequentialuuidgenerationtrait\/trait-implementations","title":"Trait Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/sequentialuuidgenerationtrait\/comments","title":"var comments: [Comment]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/sequentialuuidgenerationtrait\/prepare(for:)","title":"func prepare(for: Test) async throws","type":"method"}],"path":"\/documentation\/sharedtesting\/sequentialuuidgenerationtrait\/trait-implementations","title":"Trait Implementations","type":"symbol"}],"path":"\/documentation\/sharedtesting\/sequentialuuidgenerationtrait","title":"SequentialUUIDGenerationTrait","type":"struct"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/foundation\/uuid\/incrementing()","title":"static func incrementing() async throws -> UUID","type":"method"},{"path":"\/documentation\/sharedtesting\/foundation\/uuid\/reset()","title":"static func reset() async","type":"method"}],"path":"\/documentation\/sharedtesting\/foundation\/uuid","title":"UUID","type":"extension"}],"path":"\/documentation\/sharedtesting\/foundation","title":"Foundation","type":"extension"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/testing\/trait\/sequentialuuidgeneration()","title":"static func sequentialUUIDGeneration() -> Self","type":"method"},{"path":"\/documentation\/sharedtesting\/testing\/trait\/teardowntracking()","title":"static func teardownTracking() -> Self","type":"method"}],"path":"\/documentation\/sharedtesting\/testing\/trait","title":"Trait","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/sharedtesting\/testing\/test\/assertequal(_:_:sourcelocation:)","title":"static func assertEqual(Data, Data, sourceLocation: SourceLocation) throws","type":"method"},{"path":"\/documentation\/sharedtesting\/testing\/test\/async(yieldcount:process:onbeforecompletion:onaftercompletion:)","title":"static func async<T>(yieldCount: Int, process: () async throws -> T, onBeforeCompletion: (() -> Void)?, onAfterCompletion: ((T) -> Void)?) async throws","type":"method"},{"path":"\/documentation\/sharedtesting\/testing\/test\/expect(_:sourcelocation:)","title":"static func expect<T, E>(() async throws -> T, sourceLocation: SourceLocation) -> ExpectationTracker<T, E>","type":"method"},{"path":"\/documentation\/sharedtesting\/testing\/test\/makejson(witharray:)","title":"static func makeJSON(withArray: [String]) -> Data","type":"method"},{"path":"\/documentation\/sharedtesting\/testing\/test\/makejson(withobject:)","title":"static func makeJSON(withObject: [String : Any]) -> Data","type":"method"},{"path":"\/documentation\/sharedtesting\/testing\/test\/makejson(withobjects:)","title":"static func makeJSON(withObjects: [[String : Any]]) -> Data","type":"method"},{"path":"\/documentation\/sharedtesting\/testing\/test\/trackchange(of:in:sourcelocation:)","title":"static func trackChange<SUT, T>(of: KeyPath<SUT, T>, in: SUT, sourceLocation: SourceLocation) -> ChangeTracker<SUT, T>","type":"method"},{"path":"\/documentation\/sharedtesting\/testing\/test\/trackformemoryleaks(_:isknowissue:sourcelocation:)","title":"static func trackForMemoryLeaks(AnyObject, isKnowIssue: Bool, sourceLocation: SourceLocation) async","type":"method"}],"path":"\/documentation\/sharedtesting\/testing\/test","title":"Test","type":"extension"}],"path":"\/documentation\/sharedtesting\/testing","title":"Testing","type":"extension"}],"path":"\/documentation\/sharedtesting","title":"SharedTesting","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}